#!/usr/bin/env ruby

require "rubygems"
require "optparse"
require File.expand_path('../../lib/syslog_shipper',  __FILE__)

def main(args)
  globcheck_interval = 5
  exclude_patterns = []
  hostarg = nil
  verbose = false
  tls = false

  opts = OptionParser.new do |opts|
    opts.banner = [
      "Usage: #{$0} [options] -s HOST:PORT <path_or_glob> [path_or_glob2] [...]",
      "  If a path begins with '+' each line is sent unmodified to the syslog server.",
      "  Otherwise, this tool will prefix each line read from the file with a syslog",
      "  header. ",
      "",
      "  For example: #{$0} -s somehost:514 +/var/log/messages /var/log/apache2/access.log",
    ].join("\n")

    opts.on("-i SECONDS", "--check-interval SECONDS",
            "How frequently, in seconds, to check the glob patterns" \
            "for new files") do |x|
      globcheck_interval = x.to_f
    end # -i SECONDS

    opts.on("-x EXCLUDE", "--exclude EXCLUDE",
            "A pattern to ignore. Wildcard/globs accepted." \
            " Can be specified multiple times") do |pattern|
      exclude_patterns << pattern_to_regexp(pattern)
    end

    opts.on("-s HOST:PORT", "--server HOST:PORT",
            "What syslog server to ship to (uses TCP)") do |arg|
      hostarg = arg
    end

    opts.on("-v", "--verbose", "verbose (outputs each log line as seen)") do |arg|
      SyslogShipper::Client.verbose = true
    end

    opts.on("--ping", "connect and quit (implies -v)") do |arg|
      SyslogShipper::Client.verbose = true
      SyslogShipper::Client.ping = true
    end    

    opts.on("-c CERT_PATH", "--ca-cert CERT_PATH", "Certificate authority PEM file to use") do |arg|
      SyslogShipper::Client.ca_cert = arg
      SyslogShipper::Client.with_tls = true
    end

    opts.on("--tls", "enable TLS support (use with -c to specify a non-system CA)") do |arg|
      SyslogShipper::Client.with_tls = true
    end

    opts.on("--skip-peer-check", "disable peer checking for TLS connections (not recommended).  You will be prompted otherwise.") do |arg|
      SyslogShipper::Client.with_tls = true
      SyslogShipper::Client.bypass_peer_check = true
    end    
  end # OptionParser

  opts.parse!(args)

  if args.length == 0 or hostarg == nil
    puts opts.banner
    return 1
  end

  EventMachine.run do
    Signal.trap("INT") do
      EventMachine.schedule do
        $stderr.puts "Got SIGINT"
        exit 128 + (Signal.list["INT"])
      end
    end

    host, port = hostarg.split(":")
    port = 514 if port == nil

    connection = if tls 
      EventMachine::connect(host, port, SyslogShipper::TlsWrapper) 
    else
      EventMachine::connect(host, port) 
    end

    args.each do |path|
      if path.start_with?("+")
        SyslogShipper::Client.raw = true
        path = path[1..-1]
      else
        SyslogShipper::Client.raw = false
      end

      EventMachine::FileGlobWatchTail.new(path, SyslogShipper::Client,
                                          interval = globcheck_interval,
                                          exclude = exclude_patterns,
                                          start_pos = -1,
                                          connection = connection)
    end # args.each
  end # EventMachine.run
end # def main

exit(main(ARGV))

private 

def pattern_to_regexp(pattern)
  pattern.gsub!(".", "\\.") # fix literal .
  pattern.gsub!("*", ".+")  # * becomes .+
  pattern.gsub!("?", ".")   # ? becomes .
  return Regexp.new(pattern)
end # def pattern_to_regexp
